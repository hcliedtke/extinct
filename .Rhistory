group_by(parameter) %>%
summarise(named_vec = list(value)) %>%
deframe()
dat$passive_surveys
dat
runApp()
runApp()
shiny::runApp()
runApp()
?p
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
# Define server logic
server <- function(input, output, session) {
# Reactive value to store the initial slider value
initial_value <- reactiveVal(0)
# Observe the uploaded file and update the slider based on the file's value
observeEvent(input$file, {
req(input$file)
# Read the CSV file (assuming it has one value in the first cell)
data <- read.csv(input$file$datapath, header = FALSE)
value <- as.numeric(data[1, 1])
# Update the reactive value for the initial slider value
initial_value(value)
# Update the slider input with the value from the file
updateSliderInput(session, "slider", value = value)
})
# Reset button to reset the slider to the initial value from the file
observeEvent(input$reset, {
updateSliderInput(session, "slider", value = initial_value())
})
# Display the current value of the slider
output$slider_value <- renderText({
paste("Current Slider Value:", input$slider)
})
}
# Load necessary libraries
library(shiny)
# Define UI
ui <- fluidPage(
titlePanel("Slider Input with Initial Values from File"),
sidebarLayout(
sidebarPanel(
# File input for uploading the CSV file containing the initial value
fileInput("file", "Upload CSV file with initial slider value",
accept = c(".csv")),
# Slider input (initially set to 0, will update based on uploaded file)
sliderInput("slider", "Slider", min = 0, max = 100, value = 0),
# Button to reset slider to initial value from file
actionButton("reset", "Reset Slider")
),
mainPanel(
# Display the current slider value
textOutput("slider_value")
)
)
)
# Define server logic
server <- function(input, output, session) {
# Reactive value to store the initial slider value
initial_value <- reactiveVal(0)
# Observe the uploaded file and update the slider based on the file's value
observeEvent(input$file, {
req(input$file)
# Read the CSV file (assuming it has one value in the first cell)
data <- read.csv(input$file$datapath, header = FALSE)
value <- as.numeric(data[1, 1])
# Update the reactive value for the initial slider value
initial_value(value)
# Update the slider input with the value from the file
updateSliderInput(session, "slider", value = value)
})
# Reset button to reset the slider to the initial value from the file
observeEvent(input$reset, {
updateSliderInput(session, "slider", value = initial_value())
})
# Display the current value of the slider
output$slider_value <- renderText({
paste("Current Slider Value:", input$slider)
})
}
# Run the app
shinyApp(ui = ui, server = server)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
# Define UI
ui <- fluidPage(
titlePanel("Slider Input with Initial Values from File"),
sidebarLayout(
sidebarPanel(
# File input for uploading the CSV file containing the initial value
fileInput("file", "Upload CSV file with initial slider value",
accept = c(".csv")),
# Slider input (initially set to 0, will update based on uploaded file)
sliderInput("slider", "Slider", min = 0, max = 100, value = 0),
# Button to reset slider to initial value from file
actionButton("reset", "Reset Slider")
),
mainPanel(
# Display the current slider value
textOutput("slider_value")
)
)
)
# Load necessary libraries
library(shiny)
# Define UI
ui <- fluidPage(
titlePanel("Slider Input with Initial Values from File"),
sidebarLayout(
sidebarPanel(
# File input for uploading the CSV file containing the initial value
fileInput("file", "Upload CSV file with initial slider value",
accept = c(".csv")),
# Slider input (initially set to 0, will update based on uploaded file)
sliderInput("slider", "Slider", min = 0, max = 100, value = 0),
# Button to reset slider to initial value from file
actionButton("reset", "Reset Slider")
),
mainPanel(
# Display the current slider value
textOutput("slider_value")
)
)
)
# Define server logic
server <- function(input, output, session) {
# Reactive value to store the initial slider value
initial_value <- reactiveVal(0)
# Observe the uploaded file and update the slider based on the file's value
observeEvent(input$file, {
req(input$file)
# Read the CSV file (assuming it has one value in the first cell)
data <- read.csv(input$file$datapath, header = FALSE)
value <- as.numeric(data[1, 1])
# Update the reactive value for the initial slider value
initial_value(value)
# Update the slider input with the value from the file
updateSliderInput(session, "slider", value = value)
})
# Reset button to reset the slider to the initial value from the file
observeEvent(input$reset, {
updateSliderInput(session, "slider", value = initial_value())
})
# Display the current value of the slider
output$slider_value <- renderText({
paste("Current Slider Value:", input$slider)
})
}
# Run the app
shinyApp(ui = ui, server = server)
# Load necessary libraries
library(shiny)
# Define UI
ui <- fluidPage(
titlePanel("Slider Input with Initial Values from File"),
sidebarLayout(
sidebarPanel(
# File input for uploading the CSV file containing the initial value
fileInput("file", "Upload CSV file with initial slider value",
accept = c(".csv")),
# Slider input (initially set to 0, will update based on uploaded file)
sliderInput("slider", "Slider", min = 0, max = 100, value = 0),
# Button to reset slider to initial value from file
actionButton("reset", "Reset Slider")
),
mainPanel(
# Display the current slider value
textOutput("slider_value")
)
)
)
# Define server logic
server <- function(input, output, session) {
# Reactive value to store the initial slider value
initial_value <- reactiveVal(c(0,0.5))
# Observe the uploaded file and update the slider based on the file's value
observeEvent(input$file, {
req(input$file)
# Read the CSV file (assuming it has one value in the first cell)
data <- read.csv(input$file$datapath, header = FALSE)
value <- as.numeric(data[1, 1])
# Update the reactive value for the initial slider value
initial_value(value)
# Update the slider input with the value from the file
updateSliderInput(session, "slider", value = value)
})
# Reset button to reset the slider to the initial value from the file
observeEvent(input$reset, {
updateSliderInput(session, "slider", value = initial_value())
})
# Display the current value of the slider
output$slider_value <- renderText({
paste("Current Slider Value:", input$slider)
})
}
# Run the app
shinyApp(ui = ui, server = server)
# Load necessary libraries
library(shiny)
# Define UI
ui <- fluidPage(
titlePanel("Slider Input with Initial Values from File"),
sidebarLayout(
sidebarPanel(
# File input for uploading the CSV file containing the initial value
fileInput("file", "Upload CSV file with initial slider value",
accept = c(".csv")),
# Slider input (initially set to 0, will update based on uploaded file)
sliderInput("slider", "Slider", min = 0, max = 100, value = c(20,40)),
# Button to reset slider to initial value from file
actionButton("reset", "Reset Slider")
),
mainPanel(
# Display the current slider value
textOutput("slider_value")
)
)
)
# Define server logic
server <- function(input, output, session) {
# Reactive value to store the initial slider value
initial_value <- reactiveVal(0)
# Observe the uploaded file and update the slider based on the file's value
observeEvent(input$file, {
req(input$file)
# Read the CSV file (assuming it has one value in the first cell)
data <- read.csv(input$file$datapath, header = FALSE)
value <- as.numeric(data[1, 1])
# Update the reactive value for the initial slider value
initial_value(value)
# Update the slider input with the value from the file
updateSliderInput(session, "slider", value = value)
})
# Reset button to reset the slider to the initial value from the file
observeEvent(input$reset, {
updateSliderInput(session, "slider", value = initial_value())
})
# Display the current value of the slider
output$slider_value <- renderText({
paste("Current Slider Value:", input$slider)
})
}
# Run the app
shinyApp(ui = ui, server = server)
# Load necessary libraries
library(shiny)
# Define UI
ui <- fluidPage(
titlePanel("Slider Input with Initial Values from File"),
sidebarLayout(
sidebarPanel(
# File input for uploading the CSV file containing the initial value
fileInput("file", "Upload CSV file with initial slider value",
accept = c(".csv")),
# Slider input (initially set to 0, will update based on uploaded file)
sliderInput("slider", "Slider", min = 0, max = 100, value = c(20,40)),
# Button to reset slider to initial value from file
actionButton("reset", "Reset Slider")
),
mainPanel(
# Display the current slider value
textOutput("slider_value")
)
)
)
# Define server logic
server <- function(input, output, session) {
# Reactive value to store the initial slider value
initial_value <- reactiveVal(c(0,14))
# Observe the uploaded file and update the slider based on the file's value
observeEvent(input$file, {
req(input$file)
# Read the CSV file (assuming it has one value in the first cell)
data <- read.csv(input$file$datapath, header = FALSE)
value <- as.numeric(data[1, 1])
# Update the reactive value for the initial slider value
initial_value(value)
# Update the slider input with the value from the file
updateSliderInput(session, "slider", value = value)
})
# Reset button to reset the slider to the initial value from the file
observeEvent(input$reset, {
updateSliderInput(session, "slider", value = initial_value())
})
# Display the current value of the slider
output$slider_value <- renderText({
paste("Current Slider Value:", input$slider)
})
}
# Run the app
shinyApp(ui = ui, server = server)
# Load necessary libraries
library(shiny)
# Define UI
ui <- fluidPage(
titlePanel("Slider Input with Initial Values from File"),
sidebarLayout(
sidebarPanel(
# File input for uploading the CSV file containing the initial value
fileInput("file", "Upload CSV file with initial slider value",
accept = c(".csv")),
# Slider input (initially set to 0, will update based on uploaded file)
sliderInput("slider", "Slider", min = 0, max = 100, value = c(20,40)),
# Button to reset slider to initial value from file
actionButton("reset", "Reset Slider")
),
mainPanel(
# Display the current slider value
textOutput("slider_value")
)
)
)
# Define server logic
server <- function(input, output, session) {
# Reactive value to store the initial slider value
initial_value <- reactiveVal(c(0,14))
# Observe the uploaded file and update the slider based on the file's value
observeEvent(input$file, {
req(input$file)
# Read the CSV file (assuming it has one value in the first cell)
data <- read.csv(input$file$datapath, header = FALSE)
value <- as.numeric(data[1, 1:2])
# Update the reactive value for the initial slider value
initial_value(value)
# Update the slider input with the value from the file
updateSliderInput(session, "slider", value = value)
})
# Reset button to reset the slider to the initial value from the file
observeEvent(input$reset, {
updateSliderInput(session, "slider", value = initial_value())
})
# Display the current value of the slider
output$slider_value <- renderText({
paste("Current Slider Value:", input$slider)
})
}
# Run the app
shinyApp(ui = ui, server = server)
# Load necessary libraries
library(shiny)
# Define UI
ui <- fluidPage(
titlePanel("Slider Input with Initial Values from File"),
sidebarLayout(
sidebarPanel(
# File input for uploading the CSV file containing the initial value
fileInput("file", "Upload CSV file with initial slider value",
accept = c(".csv")),
# Slider input (initially set to 0, will update based on uploaded file)
sliderInput("slider", "Slider", min = 0, max = 100, value = c(20,40)),
# Button to reset slider to initial value from file
actionButton("reset", "Reset Slider")
),
mainPanel(
# Display the current slider value
textOutput("slider_value")
)
)
)
# Define server logic
server <- function(input, output, session) {
# Reactive value to store the initial slider value
initial_value <- reactiveVal(c(0,14))
# Observe the uploaded file and update the slider based on the file's value
observeEvent(input$file, {
req(input$file)
# Read the CSV file (assuming it has one value in the first cell)
data <- read.csv(input$file$datapath, header = FALSE)
value <- as.numeric(data[1, 1:2])
# Update the reactive value for the initial slider value
initial_value(value)
# Update the slider input with the value from the file
updateSliderInput(session, "slider", value = value)
})
# Reset button to reset the slider to the initial value from the file
observeEvent(input$reset, {
updateSliderInput(session, "slider", value = initial_value())
})
# Display the current value of the slider
output$slider_value <- renderText({
paste("Current Slider Value:", input$slider)
})
}
# Run the app
shinyApp(ui = ui, server = server)
runApp()
runApp()
runApp()
runApp()
read_extinct_excel("~/Documents/extinct/c_maridadi/Churamiti maridadi.xlsx")
read_excel("~/Documents/extinct/c_maridadi/Churamiti maridadi.xlsx", sheet = "Surveys", range = "B11:J12" , col_names = TRUE) %>%
as_tibble() %>%
pivot_longer(everything(), names_to = "parameter") %>%
separate(parameter, sep="_", into=c("parameter","bound")) %>%
group_by(parameter) %>%
summarise(named_vec = list(value)) %>%
deframe()
dat<-list()
dat$passive_surveys<-
read_excel("~/Documents/extinct/c_maridadi/Churamiti maridadi.xlsx", sheet = "Surveys", range = "B11:J12" , col_names = TRUE) %>%
as_tibble() %>%
pivot_longer(everything(), names_to = "parameter") %>%
separate(parameter, sep="_", into=c("parameter","bound")) %>%
group_by(parameter) %>%
summarise(named_vec = list(value)) %>%
deframe()
dat
dat$passive_surveys<-
read_excel("~/Documents/extinct/c_maridadi/Churamiti maridadi.xlsx", sheet = "Surveys", range = "B11:J12" , col_names = TRUE) %>%
as_tibble() %>%
pivot_longer(everything(), names_to = "parameter") %>%
separate(parameter, sep="_", into=c("parameter","bound")) %>%
group_by(parameter) %>%
summarise(named_vec = list(value)) %>%
deframe()
read_excel("~/Documents/extinct/c_maridadi/Churamiti maridadi.xlsx", sheet = "Surveys", range = "B11:J12" , col_names = TRUE) %>%
as_tibble() %>%
pivot_longer(everything(), names_to = "parameter") %>%
separate(parameter, sep="_", into=c("parameter","bound")) %>%
group_by(parameter) %>%
summarise(named_vec = list(value)) %>%
deframe()
dat<-list()
dat<-
read_excel("~/Documents/extinct/c_maridadi/Churamiti maridadi.xlsx", sheet = "Surveys", range = "B11:J12" , col_names = TRUE) %>%
as_tibble() %>%
pivot_longer(everything(), names_to = "parameter") %>%
separate(parameter, sep="_", into=c("parameter","bound")) %>%
group_by(parameter) %>%
summarise(named_vec = list(value)) %>%
deframe()
dat
dat<-list()
dat$passive_surveys<-list()
read_excel("~/Documents/extinct/c_maridadi/Churamiti maridadi.xlsx", sheet = "Surveys", range = "B11:J12" , col_names = TRUE) %>%
as_tibble() %>%
pivot_longer(everything(), names_to = "parameter") %>%
separate(parameter, sep="_", into=c("parameter","bound")) %>%
group_by(parameter) %>%
summarise(named_vec = list(value)) %>%
deframe()
dat
dat$passive_surveys<-read_excel("~/Documents/extinct/c_maridadi/Churamiti maridadi.xlsx", sheet = "Surveys", range = "B11:J12" , col_names = TRUE) %>%
as_tibble() %>%
pivot_longer(everything(), names_to = "parameter") %>%
separate(parameter, sep="_", into=c("parameter","bound")) %>%
group_by(parameter) %>%
summarise(named_vec = list(value)) %>%
deframe()
dat
dat$passive_surveys$eps
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
read_excel("~/Documents/extinct/c_maridadi/Churamiti maridadi.xlsx", sheet = "Threats", range = "B12:D13" , col_names = TRUE) %>%
as_tibble()
read_excel("~/Documents/extinct/c_maridadi/Churamiti maridadi.xlsx", sheet = "Threats", range = "B11:D13" , col_names = TRUE) %>%
as_tibble()
read_excel("~/Documents/extinct/c_maridadi/Churamiti maridadi.xlsx", sheet = "Threats", range = "A11:D13" , col_names = TRUE) %>%
as_tibble()
read_excel("~/Documents/extinct/c_maridadi/Churamiti maridadi.xlsx", sheet = "Threats", range = "B11:D13" , col_names = TRUE) %>%
as_tibble() %>%
mutate(parameters=c("p_local","p_spatial"))
read_excel("~/Documents/extinct/c_maridadi/Churamiti maridadi.xlsx", sheet = "Threats", range = "B11:D13" , col_names = TRUE) %>%
as_tibble() %>%
mutate(parameter=c("p_local","p_spatial"))
pivot_longer(-parameter)
read_excel("~/Documents/extinct/c_maridadi/Churamiti maridadi.xlsx", sheet = "Threats", range = "B11:D13" , col_names = TRUE) %>%
as_tibble() %>%
mutate(parameter=c("p_local","p_spatial")) %>%
pivot_longer(-parameter)
read_excel("~/Documents/extinct/c_maridadi/Churamiti maridadi.xlsx", sheet = "Threats", range = "B11:D13" , col_names = TRUE) %>%
as_tibble() %>%
mutate(parameter=c("p_local","p_spatial")) %>%
pivot_longer(-parameter, names_to="bound")
read_excel("~/Documents/extinct/c_maridadi/Churamiti maridadi.xlsx", sheet = "Threats", range = "B11:D13" , col_names = TRUE) %>%
as_tibble() %>%
mutate(parameter=c("p_local","p_spatial")) %>%
pivot_longer(-parameter, names_to="bound") %>%
group_by(parameter) %>%
summarise(named_vec = list(value)) %>%
deframe()
runApp()
runApp()
runApp()
runApp()
runApp()
