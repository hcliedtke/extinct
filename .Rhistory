# Read the CSV file (assuming it has one value in the first cell)
data <- read.csv(input$file$datapath, header = FALSE)
value <- as.numeric(data[1, 1:2])
# Update the reactive value for the initial slider value
initial_value(value)
# Update the slider input with the value from the file
updateSliderInput(session, "slider", value = value)
})
# Reset button to reset the slider to the initial value from the file
observeEvent(input$reset, {
updateSliderInput(session, "slider", value = initial_value())
})
# Display the current value of the slider
output$slider_value <- renderText({
paste("Current Slider Value:", input$slider)
})
}
# Run the app
shinyApp(ui = ui, server = server)
runApp()
runApp()
runApp()
runApp()
read_extinct_excel("~/Documents/extinct/c_maridadi/Churamiti maridadi.xlsx")
read_excel("~/Documents/extinct/c_maridadi/Churamiti maridadi.xlsx", sheet = "Surveys", range = "B11:J12" , col_names = TRUE) %>%
as_tibble() %>%
pivot_longer(everything(), names_to = "parameter") %>%
separate(parameter, sep="_", into=c("parameter","bound")) %>%
group_by(parameter) %>%
summarise(named_vec = list(value)) %>%
deframe()
dat<-list()
dat$passive_surveys<-
read_excel("~/Documents/extinct/c_maridadi/Churamiti maridadi.xlsx", sheet = "Surveys", range = "B11:J12" , col_names = TRUE) %>%
as_tibble() %>%
pivot_longer(everything(), names_to = "parameter") %>%
separate(parameter, sep="_", into=c("parameter","bound")) %>%
group_by(parameter) %>%
summarise(named_vec = list(value)) %>%
deframe()
dat
dat$passive_surveys<-
read_excel("~/Documents/extinct/c_maridadi/Churamiti maridadi.xlsx", sheet = "Surveys", range = "B11:J12" , col_names = TRUE) %>%
as_tibble() %>%
pivot_longer(everything(), names_to = "parameter") %>%
separate(parameter, sep="_", into=c("parameter","bound")) %>%
group_by(parameter) %>%
summarise(named_vec = list(value)) %>%
deframe()
read_excel("~/Documents/extinct/c_maridadi/Churamiti maridadi.xlsx", sheet = "Surveys", range = "B11:J12" , col_names = TRUE) %>%
as_tibble() %>%
pivot_longer(everything(), names_to = "parameter") %>%
separate(parameter, sep="_", into=c("parameter","bound")) %>%
group_by(parameter) %>%
summarise(named_vec = list(value)) %>%
deframe()
dat<-list()
dat<-
read_excel("~/Documents/extinct/c_maridadi/Churamiti maridadi.xlsx", sheet = "Surveys", range = "B11:J12" , col_names = TRUE) %>%
as_tibble() %>%
pivot_longer(everything(), names_to = "parameter") %>%
separate(parameter, sep="_", into=c("parameter","bound")) %>%
group_by(parameter) %>%
summarise(named_vec = list(value)) %>%
deframe()
dat
dat<-list()
dat$passive_surveys<-list()
read_excel("~/Documents/extinct/c_maridadi/Churamiti maridadi.xlsx", sheet = "Surveys", range = "B11:J12" , col_names = TRUE) %>%
as_tibble() %>%
pivot_longer(everything(), names_to = "parameter") %>%
separate(parameter, sep="_", into=c("parameter","bound")) %>%
group_by(parameter) %>%
summarise(named_vec = list(value)) %>%
deframe()
dat
dat$passive_surveys<-read_excel("~/Documents/extinct/c_maridadi/Churamiti maridadi.xlsx", sheet = "Surveys", range = "B11:J12" , col_names = TRUE) %>%
as_tibble() %>%
pivot_longer(everything(), names_to = "parameter") %>%
separate(parameter, sep="_", into=c("parameter","bound")) %>%
group_by(parameter) %>%
summarise(named_vec = list(value)) %>%
deframe()
dat
dat$passive_surveys$eps
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
read_excel("~/Documents/extinct/c_maridadi/Churamiti maridadi.xlsx", sheet = "Threats", range = "B12:D13" , col_names = TRUE) %>%
as_tibble()
read_excel("~/Documents/extinct/c_maridadi/Churamiti maridadi.xlsx", sheet = "Threats", range = "B11:D13" , col_names = TRUE) %>%
as_tibble()
read_excel("~/Documents/extinct/c_maridadi/Churamiti maridadi.xlsx", sheet = "Threats", range = "A11:D13" , col_names = TRUE) %>%
as_tibble()
read_excel("~/Documents/extinct/c_maridadi/Churamiti maridadi.xlsx", sheet = "Threats", range = "B11:D13" , col_names = TRUE) %>%
as_tibble() %>%
mutate(parameters=c("p_local","p_spatial"))
read_excel("~/Documents/extinct/c_maridadi/Churamiti maridadi.xlsx", sheet = "Threats", range = "B11:D13" , col_names = TRUE) %>%
as_tibble() %>%
mutate(parameter=c("p_local","p_spatial"))
pivot_longer(-parameter)
read_excel("~/Documents/extinct/c_maridadi/Churamiti maridadi.xlsx", sheet = "Threats", range = "B11:D13" , col_names = TRUE) %>%
as_tibble() %>%
mutate(parameter=c("p_local","p_spatial")) %>%
pivot_longer(-parameter)
read_excel("~/Documents/extinct/c_maridadi/Churamiti maridadi.xlsx", sheet = "Threats", range = "B11:D13" , col_names = TRUE) %>%
as_tibble() %>%
mutate(parameter=c("p_local","p_spatial")) %>%
pivot_longer(-parameter, names_to="bound")
read_excel("~/Documents/extinct/c_maridadi/Churamiti maridadi.xlsx", sheet = "Threats", range = "B11:D13" , col_names = TRUE) %>%
as_tibble() %>%
mutate(parameter=c("p_local","p_spatial")) %>%
pivot_longer(-parameter, names_to="bound") %>%
group_by(parameter) %>%
summarise(named_vec = list(value)) %>%
deframe()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
dat<-read_extinct_excel("t_rufolavatus/Tachybaptus rufolavatus.xlsx")
dat
dat$threats
threats_dat<-dat$threats
threats_dat
library(shiny)
# Define UI
ui <- fluidPage(
titlePanel("Slider Input for Min, Mid, and Max Values"),
sidebarLayout(
sidebarPanel(
# Slider for minimum and maximum range
sliderInput("range", "Select Range (Min and Max):",
min = 0, max = 100, value = c(25, 75), step = 1),
# Slider for the middle value
sliderInput("middle", "Select Middle Value:",
min = 0, max = 100, value = 50, step = 1)
),
mainPanel(
verbatimTextOutput("values")
)
)
)
# Define server logic
server <- function(input, output, session) {
# Observe changes in the range slider and update the middle slider's range accordingly
observe({
updateSliderInput(session, "middle",
min = input$range[1],
max = input$range[2])
})
# Output the selected values
output$values <- renderPrint({
list(
Min = input$range[1],
Middle = input$middle,
Max = input$range[2]
)
})
}
# Run the app
shinyApp(ui = ui, server = server)
runApp()
runApp()
?crosstalk::bscols
runApp()
runApp()
runApp()
runApp()
runApp()
run_extinct()
run_extinct
dat$records
records<-dat$records
# first year t=1
rec = records[records[,1]==years[1],]
rec
surveys<-dat$surveys
all_surveys<-passive_surveys %>%
filter(!year %in% c(records$year, surveys$year)) %>%
bind_rows(surveys) %>%
arrange(year)
passive_surveys<-dat$passive_surveys
all_surveys<-passive_surveys %>%
filter(!year %in% c(records$year, surveys$year)) %>%
bind_rows(surveys) %>%
arrange(year)
passive_surveys
passive_surveys<- tibble(
year = min(records$year, surveys$year):lubridate::year(Sys.Date()),
eps_lower=eps[1],
eps_best=eps[2],
eps_upper=eps[3],
pi_lower=pi[1],
pi_best=pi[2],
pi_upper=pi[3],
pr_lower=pr[1],
pr_best=pr[2],
pr_upper=pr[3],
)
min(records$year, surveys$year):lubridate::year(Sys.Date())
passive_surveys
eps<-passive_surveys$eps
eps<-passive_surveys$eps
pi<-passive_surveys$pi
pr<-passive_surveys$pr
passive_surveys<- tibble(
year = min(records$year, surveys$year):lubridate::year(Sys.Date()),
eps_lower=eps[1],
eps_best=eps[2],
eps_upper=eps[3],
pi_lower=pi[1],
pi_best=pi[2],
pi_upper=pi[3],
pr_lower=pr[1],
pr_best=pr[2],
pr_upper=pr[3],
)
passive_surveys
all_surveys<-passive_surveys %>%
filter(!year %in% c(records$year, surveys$year)) %>%
bind_rows(surveys) %>%
arrange(year)
# first year t=1
rec = records[records[,1]==years[1],]
records
years
all_years
record_years
record_years<-tibble(
year=sort(unique(c(records$year, all_surveys$year))),
record=ifelse(year %in% records$year, 1, 0)
)
record_years
all_years=record_years
years=all_years$year
# first year t=1
rec = records[records[,1]==years[1],]
rec
records
rec[,2]
rec[,3]
rec
rec[,3]
rec[,3]
rec[,2]
sur=surveys[surveys[,1]==years[t],]
surveys
t=2
sur=surveys[surveys[,1]==years[t],]
sur
years
View(surveys)
surveys
rec
rec[,3]
rec[,"pci_best"]
rec[,"pci_upper"]
px.mid = function(records=records, surveys = all_surveys, all_years=record_years)
{
### convert input to matrix
records=as.data.frame(records)
surveys=as.data.frame(surveys)
years=all_years$year
PXt = NULL
PXt.min = NULL
PXt.max = NULL
sd=NULL
PX0 = 1 # species is extant at year 0 P(X0)=1
# first year t=1
rec = records[records[,1]==years[1],]
pci.mid = rec[,"pci_best"]
pci.min=rec[,"pci_lower"]
pci.max=rec[,"pci_upper"]
PXt[1]=pxt.recording(pci.mid, PX0)
PXt.min[1]=pxt.recording(pci.min, PX0)
PXt.max[1]=pxt.recording(pci.max, PX0)
n=10000 #number of samples
pxt.sam=rep(PX0,n)
stdev=(rec[,"pci_upper"] - rec[,"pci_lower"])/4
pci.sam = rnorm(n,pci.mid,stdev)
pxt.sam = pxt.recording(pci.sam, pxt.sam)
sd[1]=sd(pxt.sam)
for (t in 2:length(years)) {
#calculating rj
if (all_years$record[t]==1) #if recording
{
rec = records[records[,1]==years[t],]
#get mid point estimate
pci.mid = rec[,"pci_best"]
pci.min=rec[,"pci_lower"]
pci.max=rec[,"pci_upper"]
PXt[t]=pxt.recording(pci.mid, PXt[t-1])
PXt.min[t]=pxt.recording(pci.min, PXt.min[t-1])
PXt.max[t]=pxt.recording(pci.max, PXt.max[t-1])
#sample to get min and max bounds
stdev=(rec[,"pci_upper"] - rec[,"pci_lower"])/4
pci.sam = rnorm(n,pci.mid,stdev)
pxt.sam = pxt.recording(pci.sam, pxt.sam)
sd[t]=sd(pxt.sam)
}  else #if survey
{
sur=surveys[surveys[,1]==years[t],]
eps.mid = sur[,"eps_best"]
pi.mid = sur[,"pi_best"]
pr.mid = sur[,"pr_best"]
eps.min = sur[,"eps_lower"]
pi.min = sur[,"pi_lower"]
pr.min = sur[,"pr_lower"]
eps.max = sur[,"eps_upper"]
pi.max = sur[,"pi_upper"]
pr.max = sur[,"pr_upper"]
PXt[t]=pxt.survey(eps.mid, pi.mid, pr.mid, PXt[t-1])
PXt.min[t] = pxt.survey(eps.max, pi.max, pr.max, PXt.min[t - 1])
PXt.max[t] = pxt.survey(eps.min, pi.min, pr.min, PXt.max[t - 1])
eps.sam = rnorm(n,eps.mid,(sur[,"eps_upper"] - sur[,"eps_lower"]) / 4)
pi.sam = rnorm(n,pi.mid,(sur[,"pi_upper"] - sur[,"pi_lower"]) / 4)
pr.sam = rnorm(n,pi.mid,(sur[,"pr_upper"] - sur[,"pr_lower"]) / 4)
pxt.sam = pxt.survey(eps.sam, pi.sam, pr.sam, pxt.sam)
sd[t]=sd(pxt.sam)
}
}
# print(cbind(PXt-3*sd,PXt,PXt+3*sd))
return (cbind(PXt-3*sd,PXt,PXt+3*sd, PXt.min, PXt.max))
}
run_extinct<-function(records, surveys, eps, pi, pr){
# Make a passive survey data table (set ranges of eps, pi and pr from slider input).
# Max years will be present year automatically.if last survey year is to be used, change to: max(records$year, surveys$year)
passive_surveys<- tibble(
year = min(records$year, surveys$year):lubridate::year(Sys.Date()),
eps_lower=eps[1],
eps_best=eps[2],
eps_upper=eps[3],
pi_lower=pi[1],
pi_best=pi[2],
pi_upper=pi[3],
pr_lower=pr[1],
pr_best=pr[2],
pr_upper=pr[3],
)
# remove survey and record years, and add real data from active surveys
all_surveys<-passive_surveys %>%
filter(!year %in% c(records$year, surveys$year)) %>%
bind_rows(surveys) %>%
arrange(year)
## fill in 0 records for survey years
record_years<-tibble(
year=sort(unique(c(records$year, all_surveys$year))),
record=ifelse(year %in% records$year, 1, 0)
)
## run model
PXt= px.mid(records=records, surveys = all_surveys, all_years=record_years) ### NOTE: FIRST SURVEY YEAR NEEDS TO OCCUR AFTER THE FIRST RECORD!!!
# make nicer table
PXt_tbl<-PXt %>%
as_tibble() %>%
rename(MC_lower=V1,
MC_upper=V3) %>%
mutate(year=record_years$year) %>%
select(year, everything())
return(PXt_tbl)
}
run_extinct(records = records, surveys = surveys, eps = eps, pi = pi, pr = pr)
runApp()
test<-run_extinct(records = records, surveys = surveys, eps = eps, pi = pi, pr = pr)
test %>%
ggplot(aes(x=year, y=PXt)) +
geom_hline(aes(yintercept=0.5), linetype="dashed") +
geom_hline(aes(yintercept=0.0), color="red") +
geom_ribbon(aes(ymin=PXt.min, ymax=PXt.max), fill="grey70") +
geom_ribbon(aes(ymin=MC_lower, ymax=MC_upper), fill="grey50") +
geom_line() +
geom_point() +
scale_color_manual(values = c("Confirmed Sighting"="deepskyblue3","No Sighting"="black"), na.value = NA)  +
scale_x_continuous(n.breaks=10) +
theme_classic() +
theme(legend.position="none") +
ggtitle(user_data()$species)
test %>%
ggplot(aes(x=year, y=PXt)) +
geom_hline(aes(yintercept=0.5), linetype="dashed") +
geom_hline(aes(yintercept=0.0), color="red") +
geom_ribbon(aes(ymin=PXt.min, ymax=PXt.max), fill="grey70") +
geom_ribbon(aes(ymin=MC_lower, ymax=MC_upper), fill="grey50") +
geom_line() +
geom_point() +
scale_color_manual(values = c("Confirmed Sighting"="deepskyblue3","No Sighting"="black"), na.value = NA)  +
scale_x_continuous(n.breaks=10) +
theme_classic() +
theme(legend.position="none")
eps
runApp()
pmin(30, 10)
pmin(30, 10, na.rm=T)
View(test)
runApp()
eps_test<-eps
eps_test
eps_test[3]<-0.25
test<-run_extinct(records = records, surveys = surveys, eps = eps_test, pi = pi, pr = pr)
View(test)
run_extinct<-function(records, surveys, eps, pi, pr){
# Make a passive survey data table (set ranges of eps, pi and pr from slider input).
# Max years will be present year automatically.if last survey year is to be used, change to: max(records$year, surveys$year)
passive_surveys<- tibble(
year = min(records$year, surveys$year):lubridate::year(Sys.Date()),
eps_lower=eps[1],
eps_best=eps[2],
eps_upper=eps[3],
pi_lower=pi[1],
pi_best=pi[2],
pi_upper=pi[3],
pr_lower=pr[1],
pr_best=pr[2],
pr_upper=pr[3],
)
# remove survey and record years, and add real data from active surveys
all_surveys<-passive_surveys %>%
filter(!year %in% c(records$year, surveys$year)) %>%
bind_rows(surveys) %>%
arrange(year)
## fill in 0 records for survey years
record_years<-tibble(
year=sort(unique(c(records$year, all_surveys$year))),
record=ifelse(year %in% records$year, 1, 0)
)
## run model
PXt= px.mid(records=records, surveys = all_surveys, all_years=record_years) ### NOTE: FIRST SURVEY YEAR NEEDS TO OCCUR AFTER THE FIRST RECORD!!!
# make nicer table
PXt_tbl<-PXt %>%
as_tibble() %>%
rename(MC_lower=V1,
MC_upper=V3) %>%
# limit upper and lower MC to 0-1
mutate(MC_lower=ifelse(MC_lower<0, 0, MC_lower),
MC_upper=ifelse(MC_upper>1, 1, MC_upper))
mutate(year=record_years$year) %>%
select(year, everything())
return(PXt_tbl)
}
test<-run_extinct(records = records, surveys = surveys, eps = eps_test, pi = pi, pr = pr)
run_extinct<-function(records, surveys, eps, pi, pr){
# Make a passive survey data table (set ranges of eps, pi and pr from slider input).
# Max years will be present year automatically.if last survey year is to be used, change to: max(records$year, surveys$year)
passive_surveys<- tibble(
year = min(records$year, surveys$year):lubridate::year(Sys.Date()),
eps_lower=eps[1],
eps_best=eps[2],
eps_upper=eps[3],
pi_lower=pi[1],
pi_best=pi[2],
pi_upper=pi[3],
pr_lower=pr[1],
pr_best=pr[2],
pr_upper=pr[3],
)
# remove survey and record years, and add real data from active surveys
all_surveys<-passive_surveys %>%
filter(!year %in% c(records$year, surveys$year)) %>%
bind_rows(surveys) %>%
arrange(year)
## fill in 0 records for survey years
record_years<-tibble(
year=sort(unique(c(records$year, all_surveys$year))),
record=ifelse(year %in% records$year, 1, 0)
)
## run model
PXt= px.mid(records=records, surveys = all_surveys, all_years=record_years) ### NOTE: FIRST SURVEY YEAR NEEDS TO OCCUR AFTER THE FIRST RECORD!!!
# make nicer table
PXt_tbl<-PXt %>%
as_tibble() %>%
rename(MC_lower=V1,
MC_upper=V3) %>%
# limit upper and lower MC to 0-1
mutate(MC_lower=ifelse(MC_lower<0, 0, MC_lower),
MC_upper=ifelse(MC_upper>1, 1, MC_upper)) %>%
mutate(year=record_years$year) %>%
select(year, everything())
return(PXt_tbl)
}
test<-run_extinct(records = records, surveys = surveys, eps = eps_test, pi = pi, pr = pr)
View(test)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
