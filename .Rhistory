data = MK_3state$data,
p = params,
method = "marginal",
rate.cat = MK_3state$rate.cat,
ntraits = NULL,
rate.mat = MK_3state$index.mat,
root.p = MK_3state$root.p)
MK_3state$root.p
knitr::opts_chunk$set(echo = TRUE)
library(corHMM)
data(primates)
phy <- multi2di(primates[[1]])
data <- primates[[2]]
MK_3state <- corHMM(phy = phy,
data = data,
rate.cat = 2,
node.states="marginal",
get.tip.states=TRUE,
nstarts=5,
n.cores=5)
params <- sapply(na.omit(c(MK_3state$index.mat)),
function(x) na.omit(c(MK_3state$solution))[x])
#
MK_3state$index.mat
MK_3state$solution
params
states_1 <- ancRECON(phy = phy,
data = data,
p = params,
rate.cat = 2,
ntraits = NULL,
rate.mat = MK_3state$index.mat,
root.p = MK_3state$root.p,
get.tip.states = TRUE,
method = "marginal")
params2<-na.omit(c(MK_3state$solution))
params2
states_2 <- ancRECON(phy = phy,
data = data,
p = params2,
rate.cat = 2,
ntraits = NULL,
rate.mat = MK_3state$index.mat,
root.p = MK_3state$root.p,
get.tip.states = TRUE,
method = "marginal")
head(MK_3state$states, 10) # corHMM() ancestral states
head(states_2$lik.anc.states, 10) # ancRECON() ancestral states
sessionInfo()
library(pacman)
p_load(ape,secsse,DDD,doMC,tidyverse,parallel,qgraph)
library(pacman)
library(BiocManager)
libr<-read.csv("~/Desktop/libs.txt", header = F)
inst<-c(libr[,1])
p_install(inst, character.only = T, force=FALSE)
library(PhylogeneticEM)
data(monkeys)
library(PhylogeneticEM)
data(monkeys)
str(monkeys)
head(monkeys$dat)
plot(params_BM(p = 2),
data = monkeys$dat, phylo = monkeys$phy,
show.tip.label = TRUE, cex = 0.5, no.margin = TRUE)
dev.off()
print(plot(1))
getOption("device")
dev.off(2)
print(plot(1))
dev.off(1)
plot(params_BM(p = 2),
data = monkeys$dat, phylo = monkeys$phy,
show.tip.label = TRUE, cex = 0.5, no.margin = TRUE)
set_null_device("png")
dev.new(â€¦, noRStudioGD = FALSE)
dev.off()
while (!is.null(dev.list())) dev.off()
plot(params_BM(p = 2),
data = monkeys$dat, phylo = monkeys$phy,
show.tip.label = TRUE, cex = 0.5, no.margin = TRUE)
install.packages("bookdown")
dat<-iris
library(tidyverse)
library(plotly)
iris %>%
ggplot(aes(x=Sepal.Length, y=Sepal.Width)) +
geom_point()
iris %>%
ggplot(aes(x=Sepal.Length, y=Sepal.Width)) +
geom_point(shape="|")
iris %>%
ggplot(aes(x=Sepal.Length, y=Sepal.Width)) +
geom_point(shape="+")
gg<=iris %>%
ggplot(aes(x=Sepal.Length, y=Sepal.Width)) +
geom_point(shape="+", size=10)
gg<-iris %>%
ggplot(aes(x=Sepal.Length, y=Sepal.Width)) +
geom_point(shape="+", size=10)
gg
ggplotly(gg)
gg<-iris %>%
ggplot(aes(x=Sepal.Length, y=Sepal.Width)) +
geom_point(shape="|", size=10)
gg
ggplotly(gg)
gg<-iris %>%
ggplot(aes(x=Sepal.Length, y=Sepal.Width)) +
geom_point(shape="|ine-ns", size=10)
gg
ggplotly(gg)
gg<-iris %>%
ggplot(aes(x=Sepal.Length, y=Sepal.Width)) +
geom_point(shape="line-ns", size=10)
gg
ggplotly(gg)
BiocManager::install("ggtree", force=TRUE)
BiocManager::install()
dat<-c(9073,
500000,
72000,
500000,
50000,
10993,
500000,
55000,
500000,
15737,
500000,
19000,
500000,
18866,
500000,
500000,
500000,
500000,
500000,
31629,
500000,
500000)
hist(dat)
hist(dat, breaks = 10)
hist(dat, breaks = 50)
hist(dat, breaks = 40)
hist(dat, breaks = 30)
area<-c(9073,
500000,
72000,
500000,
50000,
10993,
500000,
55000,
500000,
15737,
500000,
19000,
500000,
18866,
500000,
500000,
500000,
500000,
500000,
31629,
500000,
500000)
hist(dat, breaks = 30)
hist(area, breaks = 30)
hist(area, breaks = 30, xlab="Distribution in km2")
hist(area, breaks = 30, xlab="Distribution in km2", ylab="Number of Species")
hist(area, breaks = 30, xlab="Distribution (km2)", ylab="Number of Species")
getwd()
# set species working directory
setwd("~/Documents/extinct/")
library(tidyverse)
# load functions
source("./_functions_thompson_et_al.R")
# load data files for recordings and surveys
recordings <- read_csv("./c_maridadi/recordings.csv")
surveys <- read_csv("./c_maridadi/surveys.csv")
passive_surveys<- tibble(
year = min(recordings$year, surveys$year):lubridate::year(Sys.Date()),
eps_lower=0.01,
eps_upper=0.05,
pi_lower=0.7,
pi_upper=0.95,
pr_lower=0.7,
pr_upper=0.95
)
all_surveys<-passive_surveys %>%
filter(!year %in% c(recordings$year, surveys$year)) %>%
bind_rows(surveys) %>%
arrange(year)
record_years<-tibble(
year=sort(unique(c(recordings$year, all_surveys$year))),
record=ifelse(year %in% recordings$year, 1, 0)
)
## run model
PXt= px.mid(recordings=recordings, surveys = all_surveys, years=record_years$year) ### NOTE: FIRST SURVEY YEAR NEEDS TO OCCUR AFTER THE FIRST RECORD!!!
require(stats)# function for calculating mid-range values -------------------------
pxt.recording=function(pci,pxt){pci+(1-pci)*pxt}
pxt.survey=function(eps, pi, pr, pxt){(1-eps*pi*pr)*pxt}
recordings=recordings
surveys = all_surveys
years=record_years$year
### convert input to matrix
recordings=as.matrix(recordings)
surveys=as.matrix(surveys)
years=years
PXt = NULL
PXt.min = NULL
PXt.max = NULL
sd=NULL
PX0 = 1 # species is extant at year 0 P(X0)=1
recordings[recordings[,1]==years[1],]
# first year t=1
rec = recordings[recordings[,1]==years[1],]
pci.mid = (rec[,2] + rec[,3]) / 2
rec[,2]
rec
rec[,2]
# load data files for recordings and surveys
recordings <- read_csv("./c_maridadi/recordings.csv")
surveys <- read_csv("./c_maridadi/surveys.csv")
# Make a passive survey data table (set ranges of eps, pi and pr manually). Max years will be present year automatically.
## if last survey year is used: max(recordings$year, surveys$year)
passive_surveys<- tibble(
year = min(recordings$year, surveys$year):lubridate::year(Sys.Date()),
eps_lower=0.01,
eps_upper=0.05,
pi_lower=0.7,
pi_upper=0.95,
pr_lower=0.7,
pr_upper=0.95
)
# remove survey and record years, and add real data from active surveys
all_surveys<-passive_surveys %>%
filter(!year %in% c(recordings$year, surveys$year)) %>%
bind_rows(surveys) %>%
arrange(year)
### NOTE streamline this to with a fill_downup() function
## fill in 0 recordings for survey years
record_years<-tibble(
year=sort(unique(c(recordings$year, all_surveys$year))),
record=ifelse(year %in% recordings$year, 1, 0)
)
### convert input to matrix
recordings=as.data.frame(recordings)
surveys=as.data.frame(surveys)
years=years
PXt = NULL
PXt.min = NULL
PXt.max = NULL
sd=NULL
PX0 = 1 # species is extant at year 0 P(X0)=1
# first year t=1
rec = recordings[recordings[,1]==years[1],]
rec
pci.mid = (rec[,2] + rec[,3]) / 2
pci.min=rec[,2]
pci.max=rec[,3]
PXt[1]=pxt.recording(pci.mid, PX0)
PXt.min[1]=pxt.recording(pci.min, PX0)
PXt.max[1]=pxt.recording(pci.max, PX0)
n=10000 #number of samples
pxt.sam=rep(PX0,n)
stdev=(rec[,3] - rec[,2])/4
pci.sam = rnorm(n,pci.mid,stdev )
pxt.sam = pxt.recording(pci.sam, pxt.sam)
sd[1]=sd(pxt.sam)
for (t in 2:length(years)) {
#calculating rj
if (rec.year[t,2]) #if recording
{
rec = recordings[recordings[,1]==years[t],]
#get mid point estimate
pci.mid = (rec[,2] + rec[,3]) / 2
pci.min=rec[,2]
pci.max=rec[,3]
PXt[t]=pxt.recording(pci.mid, PXt[t-1])
PXt.min[t]=pxt.recording(pci.min, PXt.min[t-1])
PXt.max[t]=pxt.recording(pci.max, PXt.max[t-1])
#sample to get min and max bounds
stdev=(rec[,3] - rec[,2])/4
pci.sam = rnorm(n,pci.mid,stdev )
pxt.sam = pxt.recording(pci.sam, pxt.sam)
sd[t]=sd(pxt.sam)
}  else #if survey
{
sur=surveys[surveys[,1]==years[t],]
eps.mid = (sur[,2] + sur[,3]) / 2
pi.mid = (sur[,4] + sur[,5]) / 2
pr.mid = (sur[,6] + sur[,7]) / 2
eps.min = sur[,2]
pi.min = sur[,4]
pr.min = sur[,6]
eps.max = sur[,3]
pi.max = sur[,5]
pr.max = sur[,7]
PXt[t]=pxt.survey(eps.mid, pi.mid, pr.mid, PXt[t-1])
PXt.min[t] = pxt.survey(eps.max, pi.max, pr.max, PXt.min[t - 1])
PXt.max[t] = pxt.survey(eps.min, pi.min, pr.min, PXt.max[t - 1])
eps.sam = rnorm(n,eps.mid,(sur[,3] - sur[,2]) / 4)
pi.sam = rnorm(n,pi.mid,(sur[,5] - sur[,4]) / 4)
pr.sam = rnorm(n,pi.mid,(sur[,7] - sur[,6]) / 4)
pxt.sam = pxt.survey(eps.sam, pi.sam, pr.sam, pxt.sam)
sd[t]=sd(pxt.sam)
}
}
record_years
View(record_years)
# load data files for recordings and surveys
recordings <- read_csv("./c_maridadi/recordings.csv")
surveys <- read_csv("./c_maridadi/surveys.csv")
# Make a passive survey data table (set ranges of eps, pi and pr manually). Max years will be present year automatically.
## if last survey year is used: max(recordings$year, surveys$year)
passive_surveys<- tibble(
year = min(recordings$year, surveys$year):lubridate::year(Sys.Date()),
eps_lower=0.01,
eps_upper=0.05,
pi_lower=0.7,
pi_upper=0.95,
pr_lower=0.7,
pr_upper=0.95
)
# remove survey and record years, and add real data from active surveys
all_surveys<-passive_surveys %>%
filter(!year %in% c(recordings$year, surveys$year)) %>%
bind_rows(surveys) %>%
arrange(year)
### NOTE streamline this to with a fill_downup() function
## fill in 0 recordings for survey years
record_years<-tibble(
year=sort(unique(c(recordings$year, all_surveys$year))),
record=ifelse(year %in% recordings$year, 1, 0)
)
require(stats)# function for calculating mid-range values -------------------------
pxt.recording=function(pci,pxt){pci+(1-pci)*pxt}
pxt.survey=function(eps, pi, pr, pxt){(1-eps*pi*pr)*pxt}
### convert input to matrix
recordings=as.data.frame(recordings)
surveys=as.data.frame(surveys)
years=all_years$year
rec.year=years[record_years$record==1]
years
rec.year
PXt = NULL
PXt.min = NULL
PXt.max = NULL
sd=NULL
PX0 = 1 # species is extant at year 0 P(X0)=1
# first year t=1
rec = recordings[recordings[,1]==years[1],]
pci.mid = (rec[,2] + rec[,3]) / 2
pci.min=rec[,2]
pci.max=rec[,3]
PXt[1]=pxt.recording(pci.mid, PX0)
PXt.min[1]=pxt.recording(pci.min, PX0)
PXt.max[1]=pxt.recording(pci.max, PX0)
n=10000 #number of samples
pxt.sam=rep(PX0,n)
stdev=(rec[,3] - rec[,2])/4
pci.sam = rnorm(n,pci.mid,stdev )
pxt.sam = pxt.recording(pci.sam, pxt.sam)
sd[1]=sd(pxt.sam)
for (t in 2:length(years)) {
#calculating rj
if (rec.year[t,2]) #if recording
{
rec = recordings[recordings[,1]==years[t],]
#get mid point estimate
pci.mid = (rec[,2] + rec[,3]) / 2
pci.min=rec[,2]
pci.max=rec[,3]
PXt[t]=pxt.recording(pci.mid, PXt[t-1])
PXt.min[t]=pxt.recording(pci.min, PXt.min[t-1])
PXt.max[t]=pxt.recording(pci.max, PXt.max[t-1])
#sample to get min and max bounds
stdev=(rec[,3] - rec[,2])/4
pci.sam = rnorm(n,pci.mid,stdev )
pxt.sam = pxt.recording(pci.sam, pxt.sam)
sd[t]=sd(pxt.sam)
}  else #if survey
{
sur=surveys[surveys[,1]==years[t],]
eps.mid = (sur[,2] + sur[,3]) / 2
pi.mid = (sur[,4] + sur[,5]) / 2
pr.mid = (sur[,6] + sur[,7]) / 2
eps.min = sur[,2]
pi.min = sur[,4]
pr.min = sur[,6]
eps.max = sur[,3]
pi.max = sur[,5]
pr.max = sur[,7]
PXt[t]=pxt.survey(eps.mid, pi.mid, pr.mid, PXt[t-1])
PXt.min[t] = pxt.survey(eps.max, pi.max, pr.max, PXt.min[t - 1])
PXt.max[t] = pxt.survey(eps.min, pi.min, pr.min, PXt.max[t - 1])
eps.sam = rnorm(n,eps.mid,(sur[,3] - sur[,2]) / 4)
pi.sam = rnorm(n,pi.mid,(sur[,5] - sur[,4]) / 4)
pr.sam = rnorm(n,pi.mid,(sur[,7] - sur[,6]) / 4)
pxt.sam = pxt.survey(eps.sam, pi.sam, pr.sam, pxt.sam)
sd[t]=sd(pxt.sam)
}
}
View(all_surveys)
rec.year
t=1999
t %in% rec.year
require(stats)# function for calculating mid-range values -------------------------
pxt.recording=function(pci,pxt){pci+(1-pci)*pxt}
pxt.survey=function(eps, pi, pr, pxt){(1-eps*pi*pr)*pxt}
px.mid = function(recordings=recordings, surveys = all_surveys, all_years=record_years)
{
### convert input to matrix
recordings=as.data.frame(recordings)
surveys=as.data.frame(surveys)
years=all_years$year
rec.year=years[record_years$record==1]
PXt = NULL
PXt.min = NULL
PXt.max = NULL
sd=NULL
PX0 = 1 # species is extant at year 0 P(X0)=1
# first year t=1
rec = recordings[recordings[,1]==years[1],]
pci.mid = (rec[,2] + rec[,3]) / 2
pci.min=rec[,2]
pci.max=rec[,3]
PXt[1]=pxt.recording(pci.mid, PX0)
PXt.min[1]=pxt.recording(pci.min, PX0)
PXt.max[1]=pxt.recording(pci.max, PX0)
n=10000 #number of samples
pxt.sam=rep(PX0,n)
stdev=(rec[,3] - rec[,2])/4
pci.sam = rnorm(n,pci.mid,stdev )
pxt.sam = pxt.recording(pci.sam, pxt.sam)
sd[1]=sd(pxt.sam)
for (t in 2:length(years)) {
#calculating rj
if (t %in% rec.year) #if recording
{
rec = recordings[recordings[,1]==years[t],]
#get mid point estimate
pci.mid = (rec[,2] + rec[,3]) / 2
pci.min=rec[,2]
pci.max=rec[,3]
PXt[t]=pxt.recording(pci.mid, PXt[t-1])
PXt.min[t]=pxt.recording(pci.min, PXt.min[t-1])
PXt.max[t]=pxt.recording(pci.max, PXt.max[t-1])
#sample to get min and max bounds
stdev=(rec[,3] - rec[,2])/4
pci.sam = rnorm(n,pci.mid,stdev )
pxt.sam = pxt.recording(pci.sam, pxt.sam)
sd[t]=sd(pxt.sam)
}  else #if survey
{
sur=surveys[surveys[,1]==years[t],]
eps.mid = (sur[,2] + sur[,3]) / 2
pi.mid = (sur[,4] + sur[,5]) / 2
pr.mid = (sur[,6] + sur[,7]) / 2
eps.min = sur[,2]
pi.min = sur[,4]
pr.min = sur[,6]
eps.max = sur[,3]
pi.max = sur[,5]
pr.max = sur[,7]
PXt[t]=pxt.survey(eps.mid, pi.mid, pr.mid, PXt[t-1])
PXt.min[t] = pxt.survey(eps.max, pi.max, pr.max, PXt.min[t - 1])
PXt.max[t] = pxt.survey(eps.min, pi.min, pr.min, PXt.max[t - 1])
eps.sam = rnorm(n,eps.mid,(sur[,3] - sur[,2]) / 4)
pi.sam = rnorm(n,pi.mid,(sur[,5] - sur[,4]) / 4)
pr.sam = rnorm(n,pi.mid,(sur[,7] - sur[,6]) / 4)
pxt.sam = pxt.survey(eps.sam, pi.sam, pr.sam, pxt.sam)
sd[t]=sd(pxt.sam)
}
}
# print(cbind(PXt-3*sd,PXt,PXt+3*sd))
return (cbind(PXt-3*sd,PXt,PXt+3*sd, PXt.min, PXt.max))
}
### convert input to matrix
recordings=as.data.frame(recordings)
surveys=as.data.frame(surveys)
years=all_years$year
rec.year=years[record_years$record==1]
PXt = NULL
PXt.min = NULL
PXt.max = NULL
sd=NULL
PX0 = 1 # species is extant at year 0 P(X0)=1
# first year t=1
rec = recordings[recordings[,1]==years[1],]
recordings
surveys
years
rec.year
rm(record_years)
PXt = NULL
PXt.min = NULL
PXt.max = NULL
sd=NULL
PX0 = 1 # species is extant at year 0 P(X0)=1
# first year t=1
rec = recordings[recordings[,1]==years[1],]
recordings
recordings[,1]
years[1]
recordings[,1]==years[1]
recordings[recordings[,1]==years[1],]
# first year t=1
rec = recordings[recordings[,1]==years[1],]
